{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","React","Component","Form","onSubmit","this","props","weatherMethod","type","name","placeholder","className","Weather","temp","city","country","sunrise","sunset","error","ApiKey","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","console","log","sys","date","Date","setTime","sunsetDate","getHours","getMinutes","getSeconds","date2","sunriseDate","setState","main","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAaeA,E,iLATX,OACE,6BACE,6IACA,+L,GALWC,IAAMC,WCWVC,E,iLATX,OACE,0BAAMC,SAAYC,KAAKC,MAAMC,eAC3B,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,4EAAgBC,UAAY,kBACvE,4BAAQA,UAAY,gBAApB,8F,GALWV,IAAMC,WCmBVU,E,iLAjBX,OACE,6BACKP,KAAKC,MAAMO,MACV,yBAAKF,UAAY,aACjB,oHAAoBN,KAAKC,MAAMQ,KAA/B,KAAuCT,KAAKC,MAAMS,SAClD,kGAAiBV,KAAKC,MAAMO,MAC5B,yGAAmBR,KAAKC,MAAMU,SAC9B,mGAAkBX,KAAKC,MAAMW,SAI/B,uBAAGN,UAAY,SAAUN,KAAKC,MAAMY,MAApC,U,GAbYjB,IAAMC,WCGtBiB,EAAS,mCAsFAC,E,2MAlFbC,MAAQ,CACNR,UAAMS,EACNR,UAAMQ,EACNP,aAASO,EACTN,aAASM,EACTL,YAAQK,EACRJ,WAAOI,G,EAITC,e,uCAAiB,WAAOC,GAAP,+BAAAC,EAAA,6DACfD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAFrB,SAIbC,MAAK,4DAAuDhB,EAAvD,kBAAqEK,EAArE,kBAJQ,cAGTY,EAHS,gBAKMA,EAAQC,OALd,OAKPC,EALO,OAMbC,QAAQC,IAAIF,GACXnB,GAEGG,EAASgB,EAAKG,IAAInB,QAClBoB,EAAO,IAAIC,MACVC,QAAQtB,GACTuB,EAAaH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAEpE3B,EAAUiB,EAAKG,IAAIpB,SACnB4B,EAAQ,IAAIN,MACVC,QAAQvB,GACV6B,EAAcD,EAAMH,WAAa,IAAMG,EAAMF,aAAe,IAAME,EAAMD,aAI5E,EAAKG,SAAS,CACZjC,KAAMoB,EAAKc,KAAKlC,KAChBC,KAAMmB,EAAKxB,KACXM,QAASkB,EAAKG,IAAIrB,QAClBC,QAAS6B,EACT5B,OAAQuB,EACRtB,WAAOI,KAIT,EAAKwB,SAAS,CACZjC,UAAMS,EACNR,UAAMQ,EACNP,aAASO,EACTN,aAASM,EACTL,YAAQK,EACRJ,MAAO,4KArCI,4C,8HA4Cf,OACE,yBAAKP,UAAY,WACf,yBAAKA,UAAY,aACf,yBAAKA,UAAY,QACf,yBAAKA,UAAY,OACf,yBAAKA,UAAY,iBAAjB,MAEA,yBAAKA,UAAY,iBAEf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMJ,cAAiBF,KAAKkB,iBAC5B,kBAAC,EAAD,CACEV,KAAQR,KAAKgB,MAAMR,KACnBC,KAAQT,KAAKgB,MAAMP,KACnBC,QAAWV,KAAKgB,MAAMN,QACtBC,QAAWX,KAAKgB,MAAML,QACtBC,OAAUZ,KAAKgB,MAAMJ,OACrBC,MAASb,KAAKgB,MAAMH,iB,GAzEpBjB,IAAMC,WCKJ8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.93167567.chunk.js","sourcesContent":["import React from 'react';\n\nclass Info extends React.Component {\n  render (){\n    return (\n      <div>\n        <h2>Погодное приложение</h2>\n        <h5>Узнайте погоду в своем городе</h5>\n      </div>\n    );\n  }\n}\n\nexport default Info;","import React from 'react';\n\nclass Form extends React.Component {\n  render (){\n    return (\n      <form onSubmit = {this.props.weatherMethod}>\n        <input type='text' name='city' placeholder='Введите город' className = \"btn btn-light\" />\n        <button className = \"btn btn-info\">Получить погоду</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;","import React from 'react';\n\nclass Weather extends React.Component {\n  render (){\n    return (\n      <div>\n          {this.props.temp &&\n            <div className = \"infoWeath\">\n            <p>Местоположение: {this.props.city}, {this.props.country}</p>\n            <p>Температура: {this.props.temp}</p>\n            <p>Восход солнца: {this.props.sunrise}</p>\n            <p>Закат солнца: {this.props.sunset}</p>\n            </div>\n          }\n\n          <p className = \"error\">{ this.props.error} </p>\n      </div>\n    );\n  }\n}\n\nexport default Weather;","import React from 'react';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/weather';\n\nconst ApiKey = '5c82cc7ff466e13fa1b489c6890160bf';\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    error: undefined\n\n  }\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const api_url = await \n      fetch (`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${ApiKey}&units=metric`);\n      const data = await api_url.json();\n      console.log(data);\n    if(city) {\n    \n      var sunset = data.sys.sunset;\n      var date = new Date();\n      date.setTime(sunset);\n      var sunsetDate = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n      var sunrise = data.sys.sunrise;\n      var date2 = new Date();\n      date2.setTime(sunrise);\n      var sunriseDate = date2.getHours() + \":\" + date2.getMinutes() + \":\" + date2.getSeconds();\n\n\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        sunrise: sunriseDate,\n        sunset: sunsetDate,\n        error: undefined\n      });\n\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        sunrise: undefined,\n        sunset: undefined,\n        error: \"ОШИБКА! Введите название города!\"\n      });\n\n    }\n  }\n\n  render (){\n    return (\n      <div className = \"wrapper\">\n        <div className = \"container\">\n          <div className = \"main\">\n            <div className = \"row\">\n              <div className = \"col-sm-5 info\">  </div>\n\n              <div className = \"col-sm-7 form\">\n              \n                <Info/>\n                <Form weatherMethod = {this.gettingWeather} />\n                <Weather  \n                  temp = {this.state.temp}\n                  city = {this.state.city}\n                  country = {this.state.country}\n                  sunrise = {this.state.sunrise}\n                  sunset = {this.state.sunset}\n                  error = {this.state.error}/>\n              \n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./App.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}